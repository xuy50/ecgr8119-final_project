# -*- coding: utf-8 -*-
"""yolo_training.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a5GwaIULmIj-4HT8fQ9j0fFOdMf7u1nV
"""

# Set Up Environment and Import Libraries
# Navigate to the yolov11 directory
import os
from ultralytics import YOLO
import torch
import yaml
from pathlib import Path
import random
from glob import glob
import numpy as np
from PIL import Image
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import cv2
from ultralytics import YOLO

# Set Random Seed and Device Configuration
# Set random seed for reproducibility
random_seed = 42
random.seed(random_seed)
torch.manual_seed(random_seed)

# Check if CUDA (GPU) is available and select the device
device = 'cuda' if torch.cuda.is_available() else 'cpu'
print(f"Using device: {device}")
print(torch.version.cuda)
torch.cuda.empty_cache()

print("torch.cuda.device_count():", torch.cuda.device_count())
for i in range(torch.cuda.device_count()):
    print(f"Device {i}: {torch.cuda.get_device_name(i)}")

# Prepare Custom Data Configuration (VisDrone.yaml)
data_yaml_content = """
# VisDrone.yaml

# Train/val/test sets as 1) dir: path/to/imgs, 2) file: path/to/imgs.txt, or 3) list: [path/to/imgs1, path/to/imgs2, ..]
path: VisDrone  # dataset root dir
train: VisDrone2019-DET-train/images  # train images (relative to 'path')  6471 images
val: VisDrone2019-DET-val/images  # val images (relative to 'path')  548 images
test: VisDrone2019-DET-test-dev/images  # test images (optional)  1610 images

# Classes
names:
  0: pedestrian
  1: people
  2: bicycle
  3: car
  4: van
  5: truck
  6: tricycle
  7: awning-tricycle
  8: bus
  9: motor
"""

# Save the configuration to a file
with open('VisDrone.yaml', 'w') as file:
    file.write(data_yaml_content)

# Train YOLOv11 on VisDrone Dataset
# Load a model
# model = YOLO("yolo11n.pt")  # load a pretrained model (recommended for training)
model = YOLO("yolo11x.pt")  # load a pretrained model (recommended for training)

# Train the model
# results = model.train(data="VisDrone.yaml", epochs=5, imgsz=640)
# results = model.train(data="VisDrone.yaml", epochs=150, imgsz=640)
results = model.train(
    data="VisDrone.yaml",
    # epochs=5,
    # epochs=50,
    epochs=100,
    # epochs=150,
    # epochs=300,
    imgsz=640,
    # imgsz=720,
    # imgsz=1280,
    # imgsz=1536,
    # batch=8,  # Batch size
    # batch=32,  # Batch size
    # batch=64,  # Batch size
    # batch=72,  # Batch size
    batch=84,  # Batch size
    # batch=96,  # Batch size overload
    # batch=100,  # Batch size overload
    # batch=128,  # Batch size overload
    # device='0',  # Specify GPUs to use (GPUs 0)
    # device='0,1',  # Specify GPUs to use (GPUs 0 and 1)
    device='0,1,2,3',  # Specify GPUs to use (GPUs 0, 1, 2, 3)
    workers=8,  # Number of data loading workers
    # project='runs/detect',  # Project name
    # name='train',  # Experiment name
    exist_ok=False,  # Overwrite existing results
    verbose=True,  # Verbose output
    # optimizer='SGD',
    # optimizer='Adam',
    # optimizer='AdamW',
    # weight_decay=0.0005,
    # lr0=0.1,  # Initial learning rate
)

# Commented out IPython magic to ensure Python compatibility.
# Display the result curve
# %matplotlib inline
# result_curve_path = 'runs/detect/train/results.png'  # load test confusion matrix img path
result_curve_path = 'runs/detect/train12/results.png'  # load test confusion matrix img path

if os.path.exists(result_curve_path):
    img = mpimg.imread(result_curve_path)
    plt.figure(figsize=(10, 10))
    plt.imshow(img)
    plt.axis('off')
    plt.title('Result Curve')
    plt.show()
else:
    print('Result curve image not found.')

# Evaluate and Test the Model

# Set the image directory and model path
image_dir = 'datasets/VisDrone/VisDrone2019-DET-test-dev/images/'  # load test-dev dataset path
# model_path = 'runs/detect/train/weights/best.pt'  # load trained model path
model_path = 'runs/detect/train12/weights/best.pt'  # load trained model path

# Load the custom YOLOv11 model
model = YOLO(model_path)

# Evaluate the model on the test-dev dataset
metrics = model.val(data='VisDrone.yaml', split='test', imgsz=640)

# Commented out IPython magic to ensure Python compatibility.
# Display the test confusion matrix
# %matplotlib inline
confusion_matrix_path = 'runs/detect/val12/confusion_matrix.png'  # load test confusion matrix img path

if os.path.exists(confusion_matrix_path):
    img = mpimg.imread(confusion_matrix_path)
    plt.figure(figsize=(10, 10))
    plt.imshow(img)
    plt.axis('off')
    plt.title('Confusion Matrix')
    plt.show()
else:
    print('Confusion matrix image not found.')

# Commented out IPython magic to ensure Python compatibility.
# Get the list of image files in the test dataset
# %matplotlib inline
image_files = [f for f in os.listdir(image_dir) if f.endswith(('.jpg', '.png'))]

# Randomly select 5 images
sample_images = random.sample(image_files, 5)

# Run inference on each selected image and display the results
for img_file in sample_images:
    img_path = os.path.join(image_dir, img_file)

    # Run inference
    results = model.predict(source=img_path, save=False, imgsz=640)

    # Get the result and plot the detections
    result = results[0]
    detection_image = result.plot()

    # Display the detection result
    plt.figure(figsize=(10, 10))
    plt.imshow(detection_image)
    plt.axis('off')
    plt.title(f'Detection Result for {img_file}')
    plt.show()